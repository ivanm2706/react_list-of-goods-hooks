{"version":3,"sources":["App.tsx","index.tsx"],"names":["Sort","goodsFromServer","App","useState","reverse","setReverse","NONE","sort","setSort","visibleGoods","arrayGoods","sortBy","cloneArray","good1","good2","ALPHABET","localeCompare","LENGTH","length","sortGoodsFromServer","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,uBAAAA,I,mBAAAA,I,gBAAAA,M,KAiCE,IAAME,EAAU,WACrB,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,mBAASH,EAAKM,MAAtC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EA9BR,SACEC,EACAC,EACAP,GAEA,IAAMQ,EAAU,YAAOF,GAmBvB,OAjBAE,EAAWL,MAAK,SAACM,EAAOC,GACtB,OAAQH,GACN,KAAKX,EAAKe,SACR,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAAKiB,OACR,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAITd,GACFQ,EAAWR,UAGNQ,EAMcO,CAAoBlB,EAAiBM,EAAMH,GAmBhE,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYf,IAASP,EAAKe,WAE9BQ,QAvBe,WACrBf,EAAQR,EAAKe,WAeT,iCAYA,wBACEM,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYf,IAASP,EAAKiB,SAE9BM,QA/Ba,WACnBf,EAAQR,EAAKiB,SAuBT,4BAYA,wBACEI,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAAalB,IAEjBmB,QAnDoB,WAC1BlB,GAAYD,IA2CR,sBAYEG,IAASP,EAAKM,MAAQF,IACtB,wBACEiB,KAAK,SACLD,UAAU,mBACVG,QAhDI,WACZf,EAAQR,EAAKM,MACbD,GAAW,IA2CL,sBAWJ,6BACE,6BACGI,EAAae,KAAI,SAAAC,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,cC5HrBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a290ebca.chunk.js","sourcesContent":["import { FC, useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum Sort {\n  ALPHABET,\n  LENGTH,\n  NONE,\n}\n\nfunction sortGoodsFromServer(\n  arrayGoods: string[],\n  sortBy: Sort,\n  reverse: boolean,\n) {\n  const cloneArray = [...arrayGoods];\n\n  cloneArray.sort((good1, good2) => {\n    switch (sortBy) {\n      case Sort.ALPHABET:\n        return good1.localeCompare(good2);\n\n      case Sort.LENGTH:\n        return good1.length - good2.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (reverse) {\n    cloneArray.reverse();\n  }\n\n  return cloneArray;\n}\n\nexport const App: FC = () => {\n  const [reverse, setReverse] = useState(false);\n  const [sort, setSort] = useState(Sort.NONE);\n  const visibleGoods = sortGoodsFromServer(goodsFromServer, sort, reverse);\n\n  const reverseVisibleGoods = () => {\n    setReverse(!reverse);\n  };\n\n  const sortByAlphabet = () => {\n    setSort(Sort.ALPHABET);\n  };\n\n  const sortByLength = () => {\n    setSort(Sort.LENGTH);\n  };\n\n  const reset = () => {\n    setSort(Sort.NONE);\n    setReverse(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            { 'is-light': sort !== Sort.ALPHABET },\n          )}\n          onClick={sortByAlphabet}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-success',\n            { 'is-light': sort !== Sort.LENGTH },\n          )}\n          onClick={sortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning',\n            { 'is-light': !reverse },\n          )}\n          onClick={reverseVisibleGoods}\n        >\n          Reverse\n        </button>\n\n        {(sort !== Sort.NONE || reverse) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods.map(good => (\n            <li key={good} data-cy=\"Good\">{good}</li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}